ARM GAS  q1_1.s 			page 1


   1              	@ Ted Obuchowicz
   2              	@ May 29, 2023
   3              	@ simple_loop.s
   4              	@ adds a list of 5 numbers stored in memory
   5              	.syntax unified
   6              	.cpu cortex-m4
   7              	.thumb
   8              	
   9 0000 00040020 	.word 0x20000400
  10 0004 ED000080 	.word 0x800000ed
  11 0008 00000000 	.space 0xe4
  11      00000000 
  11      00000000 
  11      00000000 
  11      00000000 
  12              	
  13              	.data
  14              	@ declare your data here
  15 0000 01020304 	num: .byte 1,2,3,4,5 @ declare 5 bytes of data starting
  15      05
  16              	@ at address num
  17 0005 00       	sum: .space 0x01 @ reserve 1 byte of RAM without
  18              	@any initialization
  19              	
  20              	.text
  21              	start:
  22 00ec 4FF00000 		mov r0, #0 @ r0 used to hold running sum, clear it to zero
  23 00f0 0649     		ldr r1, =num @ load starting address of num into r1
  24 00f2 4FF00502 		mov r2, #5 @ r2 used as a counter to keep track of how
  25              	@ many numbers from the list have been added up
  26              	
  27              	@ we make use of register indirect addressing and conditional jumps
  28              	@ to setup a loop to add up the 5 numbers
  29 00f6 0B78     	top: 	ldrb r3, [r1] @ get number from memory, store in r3
  30 00f8 1844     		add r0, r0, r3 @ sum = sum + number from list
  31 00fa 01F10101 		add r1, r1, #1 @ make r1 point to the next number in the list
  32 00fe A2F10102 		sub r2, r2, #1 @ decrement the loop counter
  33 0102 002A     		cmp r2, #0 @ check to if end of list
  34 0104 F7D1     	bne top @ branch to top of loop if not at end of list
  35 0106 0249     		ldr r1, =sum @ load r1 with address of sum and store
  36              	@ the sum into memory
  37 0108 0870     		strb r0, [r1]
  38 010a FEE7     	stop: b stop
  39 010c 00000000 	.end
  39      05000000 
